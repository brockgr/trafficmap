#!/usr/bin/env perl

# "This product includes GeoLite data created by MaxMind, available from http://www.maxmind.com/."

# perlbrew install -J4 -Duseithreads perl-5.14.2

use strict;
use warnings;
use threads;

use Getopt::Long qw(:config no_auto_abbrev);
use Pod::Usage;
use Net::Pcap ':functions';
use NetPacket::Ethernet;
use NetPacket::IP;
use Net::Traceroute;
use Geo::IP::PurePerl;

my %options = ();


GetOptions(\%options, qw{
   help|h!  version|V!  interface|i=s 
}) or pod2usage();

pod2usage({ -verbose => 2, -exitval => 0 }) if $options{help};
#print "$::PROGRAM v$::VERSION\n" if $options{version};


my $gi = Geo::IP::PurePerl->open("GeoLiteCity.dat", GEOIP_MEMORY_CACHE);

threads->create(sub {
  warn "ok";
  sleep 10;
});

my $err = '';
my $filter;
my $my_ip = '172.23.200.157';

my $dev = $options{interface} || pcap_lookupdev(\$err);
my $pcap = pcap_open_live($dev, 1024, 1, 5, \$err) or die "fatal: can't open network device $dev: $!";
pcap_compile($pcap, \$filter, "not icmp", 0, 0) == 0 or die "fatal: filter error\n";
pcap_setfilter($pcap, $filter);
pcap_loop($pcap, 0, \&process_packet, '');
pcap_close($pcap);



my (%src_counts,%dst_counts);
sub process_packet {
  my ($user_data, $header, $packet) = @_;
  my $eth_obj = NetPacket::Ethernet->decode($packet);
  return unless $eth_obj->{type} == NetPacket::Ethernet::ETH_TYPE_IP;
  my $ip_obj = NetPacket::IP->decode($eth_obj->{data});
  my $src = $ip_obj->{src_ip};
  my $dst = $ip_obj->{dest_ip};
  my $len = $ip_obj->{len};

  if ($src eq $my_ip) {
    $src_counts{$src} += $len;
  } elsif ($dst eq $my_ip) {
    $dst_counts{$dst} += $len;
  }
  print "$src $dst $len\n";
  #traceroute($src);
}

sub traceroute {
  my ($ip) = @_;

  my $tr = Net::Traceroute->new(
    use_icmp => 1,
    query_timeout => 1,
    queries => 1,
    host => $ip,
  );

  if ($tr->found) {
    my $hops = $tr->hops;
    foreach (my $hop=0; $hop < $tr->hops; $hop++) {
      my $router = $tr->hop_query_host($hop,0);
      if ($router) {
        print "$hop: $router\n";
        my @geo = $gi->get_city_record($router);
        print "$geo[3] $geo[6],$geo[7]\n";
      }
    }
  }

}

