#!/usr/bin/perl

# "This product includes GeoLite data created by MaxMind, available from http://www.maxmind.com/."

# perlbrew install -J4 -Duseithreads perl-5.14.2
# [cpan]> install Net::Pcap NetPacket::IP Net::Traceroute Geo::IP::PurePerl 
# Geo::IP2Location

use strict;
use warnings;
use threads;
use threads::shared;
use Thread::Queue;


use Getopt::Long qw(:config no_auto_abbrev);
use Pod::Usage;
use Net::Pcap ':functions';
use NetPacket::Ethernet;
use NetPacket::IP;
use Net::Traceroute;
use Geo::IP::PurePerl;
use Geo::IP2Location;

my %options = (
  traffic_grouping_time => 5, # secs
  tracers => 30,
);


GetOptions(\%options, qw{
   help|h!  version|V!  interface|i=s 
}) or pod2usage();

pod2usage({ -verbose => 2, -exitval => 0 }) if $options{help};
#print "$::PROGRAM v$::VERSION\n" if $options{version};


my $gi = Geo::IP::PurePerl->open("GeoLiteCity.dat", GEOIP_MEMORY_CACHE);

#my $geoip2 = Geo::IP2Location->open("IP-COUNTRY-REGION-CITY-LATITUDE-LONGITUDE-ISP-DOMAIN.BIN");
#my $latitude = $obj->get_latitude("20.11.187.239");
#my $longitude = $obj->get_longitude("20.11.187.239");


my %traffic : shared; # Data bytes seen by src/dst IP
my $to_trace = Thread::Queue->new(); # IP's to traceroute
my %tracing : shared; # IP's being tracerouted, with bytes seen
my %traced : shared; # Cached hop arrays, by IP
my $hop_data = shared_clone({}); # Data by lat-lng location

# This thread collects the captured data every "traffic_grouping_time"
# and queue up traceroutes for the sources and destinationd
threads->create(sub { for (;;) {
  sleep $options{traffic_grouping_time};
  {
    lock %traffic;
    while (my ($ip, $len) = each %traffic) {
      {
        lock %tracing;
        $to_trace->enqueue($ip) unless $tracing{$ip};
        $tracing{$ip} = $len;
      }
    }
    %traffic = ();
  }
} });


# Spawn "tracers" seperate threads to handle the collection of
# traceroute hops, and then use the hops to generate the hop_data
for (1..$options{tracers}) {
  threads->create(sub { for (;;) {
    my $ip = $to_trace->dequeue();
    my $hops = traceroute($ip);

    my $len = do {
      lock %tracing;
      delete $tracing{$ip};
    };

    next if @$hops < 2; # Too local, or failed
    for my $i (1..(@$hops-1)) {
      if ($hops->[$i-1] ne $hops->[$i]) {
print "$hops->[$i-1] => $hops->[$i] : $len\n";
        lock $hop_data;
        my $from = $hop_data->{$hops->[$i-1]} ||= shared_clone({});
        my $to   = $from->{$hops->[$i]} ||= shared_clone([]);
        push @$to, shared_clone({ t => time, l => $len });
        # TODO - purge old @$to's from the end
      }
    }

  } });
}

# Logging thread - give us an idea what is happening
threads->create(sub { for (;;) {
  my $n = $to_trace->pending();
  print "$n requests in trace queue\n";
  print keys(%tracing)-$n." traces in progress\n";
  print keys(%traced)." traces cached\n";
  sleep 5;
}});



# Main packet capture code, and event loop
my ($err, $filter);
my $dev = $options{interface} || pcap_lookupdev(\$err);
my $pcap = pcap_open_live($dev, 1024, 1, 5, \$err) or die "fatal: can't open network device $dev: $!";
pcap_compile($pcap, \$filter, "not icmp", 0, 0) == 0 or die "fatal: filter error\n";
pcap_setfilter($pcap, $filter);
pcap_loop($pcap, 0, \&process_packet, '');
pcap_close($pcap);

sub process_packet {
  my ($user_data, $header, $packet) = @_;
  my $eth_obj = NetPacket::Ethernet->decode($packet);
  return unless $eth_obj->{type} == NetPacket::Ethernet::ETH_TYPE_IP;
  my $ip_obj = NetPacket::IP->decode($eth_obj->{data});
  my $src = $ip_obj->{src_ip};
  my $dst = $ip_obj->{dest_ip};
  my $len = $ip_obj->{len};

  $traffic{$src} ||= 0;
  $traffic{$src} += $len;
  $traffic{$dst} ||= 0;
  $traffic{$dst} += $len;
}


sub traceroute {
  my ($ip) = @_;

  {
    lock %traced;
    my $hops = $traced{$ip};
    return $hops if $hops;
  }

  print "Tracing $ip\n";
  my $tr = Net::Traceroute->new(
    use_icmp => 1,
    query_timeout => 1,
    queries => 1,
    host => $ip,
  );

  my @hops : shared;
  my $last_ll = '';
  if ($tr->found) {
    my $hops = $tr->hops;
    foreach (my $hop=0; $hop < $tr->hops; $hop++) {
      my $router = $tr->hop_query_host($hop,0);
      next unless $router;
      my @geo = $gi->get_city_record($router);
      next unless defined($geo[6]) && defined($geo[7]);
      my $ll = "$geo[6],$geo[7]";
      #print "$hop: $router $ll\n";
      next unless $ll != $last_ll;
      push @hops, $last_ll = $ll;
    }
    print "$ip ".@hops." hops\n";
    return do {
      lock %traced;
      $traced{$ip} = \@hops;
    };
  }

}

